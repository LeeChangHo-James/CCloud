[씬과 씬 사이에 게임오브젝트 옮기는 법]
● 씬과 씬 사이에 게임오브젝트 옮기기
  ▶ 게임 캐릭터 옮기거나 펫을 옮길때 사용하면 될듯하다.
  ▶ ex)
     using System.Collections;
     using System.Collections.Generic;
     using UnityEngine;
     using UnityEngine.UI;
     using UnityEngine.SceneManagement;

     public class UIManager : MonoBehaviour {

         public Button btn;
         public GameObject obj;
         public int sceneNum = 1;

         void Start() {
             btn.onClick.AddListener (btnListener);
         }

         public void btnListener()
         {
             SceneManagement.LoadScene ("[씬이름]", LoadSceneMode.Additive);
             GameManager.instance.MoveToOtherScene (obj sceneNum);
         }
     }
  
  ▶ ex2)
     using System.Collections;
     using System.Collections.Generic; 
     using UnityEngine;   
     using UnityEngine.SceneManagement;

     public class GameManager : MonoBehaviour {

         public static GameManager instance;

         void Awake() {
             instance = this;
         }

         public void MoveToOtherScene(GameObject obj, int sceneNum)
         {
             Scene scene = SceneManagement.GetSceneByBuildIndex (sceneNum);
             SceneManage.MoveGameObjectToScene (obj, scene); // 오브젝트를 스크린으로 넘긴다.
         }
     }
     ▶ GetSceneByBuildIndex 메소드는 빌드 세팅에 나와있는 빌드 씬 순서의 인덱스를 매개변수로 받아 해당 씬을 리턴
        ▶ 빌드 씬이 Test1, Test2 이 순서로 있으면 Test1 = [0] , Test2 = [1] 인덱스가 매겨진다.


[씬이 바뀌어도 유지해야만 하는 게임오브젝트]
● DontDestroyOnLoad()
  ▶ 씬이 바뀌어도 해당 게임오브젝트를 파괴하지 않고 남아있게 하기위해 사용
  ▶ ex)
     using UnityEngine;
     usnig System.Collections;

     public void ExampleClass : MonoBehaviour {
         void Awake() {
             DontDestroyOnLoad(gameObject); 
         }
     }
  ▶ DontDestroyOnLoad의 매개변수가 되는 게임오브젝트는 최상위 계층의 게임오브젝트이어야만 한다.
     ▶ 다른 게임오브젝트의 자식 게임오브젝트라면 부모 게임오브젝트가 파괴되면 같이 사라져버리기 때문이다.