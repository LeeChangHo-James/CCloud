[싱글턴 패턴]
● 싱글턴 패턴
  ▶ 싱글턴 패턴은 디자인 패턴 중 하나로 단일 시스템 자원을 관리하는 인스턴스
     ex) 대표적으로 게임매니저(GameManager) 역할을 하는 스크립트
         ▶ 게임의 전체 볼륨을 조절한다거나 난이도 설정, 오브젝트 풀 관리 등의 목적으로 사용
         ▶ 단일 시스템 자원을 관리하는 타입이 필요한 경우에 사용
  ▶ 많은 다른 스크립트가 하나의 스크립트에 접근해야하고 접근할 때 스크립트마다 각각 인스턴스화 하는 것이 아니라
     하나의 인스턴스로 충분할 경우(전역 변수의 역할과 비슷) 싱글턴 패턴을 사용하는 것이 효과적
     ▶ 게임매니저 스크립트와 같은 경우는 여러 스크립트에 영향을 준다.
        ▶ 일종의 전역변수(static variable)과 같은 역할도 겸한다.
  ▶ 싱글턴은 최초로 생성된(클래스가 메모리에 로드될 때 만들어지는) 인스턴스만 존재하고 이후에는 생성 자체가 
     불가능(private)한 소프트웨어 디자인 방법
  ▶ 싱글턴 패턴으로 만든 싱글턴 인스턴스는 게임(씬) 내에 하나만 존재

● 싱글턴 패턴 유니티 사용법
  ▶ ex)
     using System.Collections;
     using System.Collections.Generic;
     using UnityEngine;

     public class GameManager : MonoBehaviour {
         
         public static GameManager instance; 

         public int level;

         void Awake(){
             instance = this; // 재귀적으로 자기 자신의 참조변수를 선언
         }
     }
     ▶ 싱글턴 패턴은 자기 자신을 타입으로 하는 참조변수의 선언과 Awake() 메소드에서 this 키워드로 그 참조변수를    
        설정하면 바로 사용 가능

  ▶ GameManager사용
     using System.Collections;
     using System.Collections.Generic;
     using UnityEngine;

     public class WormCtrl : MonoBehaviour {

         void Start()
         {
             GameManager.instance.level = 100;
         }
     }

● 싱글턴 패턴의 접근제한자
  ▶ 싱글턴 패턴의 필드, 프로퍼티는 그 성격상 접근제한자를 public으로 하는 것이 좋다.
     ▶ 그렇지 않으면 다른 스크립트에서 싱글턴 인스턴스에 접근하더라도 해당 필드, 프로퍼티는 사용할 수 없다.
        ▶ 싱글턴 내부에서만 사용할 경우에는 private라도 상관 없다.